package uploader

import (
	_ "embed"
	"encoding/json"
	"github.com/stretchr/testify/assert"
	"testing"
)

var (
	//go:embed cf-version-types.json
	cfVersionTypes []byte
	//go:embed cf-versions.json
	cfVersions []byte
)

var cfVersionsTestData = map[string]int{
	// MC 1.0
	"1.0":   4482,
	"1.0.0": 180,

	// MC 1.1
	"1.1": 186,

	// MC 1.2
	"1.2.1": 201,
	"1.2.2": 202,
	"1.2.3": 203,
	"1.2.4": 4462,
	"1.2.5": 204,

	// MC 1.3
	"1.3.1": 241,
	"1.3.2": 246,

	// MC 1.4
	"1.4.2": 255,
	"1.4.4": 4460,
	"1.4.5": 4461,
	"1.4.6": 268,
	"1.4.7": 272,

	// MC 1.5
	"1.5.0": 279,
	"1.5.1": 280,
	"1.5.2": 312,
	"1.5.3": 9791,

	// MC 1.6
	"1.6.1": 318,
	"1.6.2": 320,
	"1.6.4": 326,

	// MC 1.7
	"1.7.2":  361,
	"1.7.3":  5912,
	"1.7.4":  367,
	"1.7.5":  4444,
	"1.7.6":  4445,
	"1.7.7":  4446,
	"1.7.8":  4447,
	"1.7.9":  4448,
	"1.7.10": 4449,

	// MC 1.8
	"1.8":   4455,
	"1.8.1": 4463,
	"1.8.2": 4465,
	"1.8.3": 4466,
	"1.8.4": 4478,
	"1.8.5": 4479,
	"1.8.6": 4480,
	"1.8.7": 5642,
	"1.8.8": 5703,
	"1.8.9": 5806,

	// MC 1.9
	"1.9":   5946,
	"1.9.1": 5998,
	"1.9.2": 5997,
	"1.9.3": 6085,
	"1.9.4": 6084,

	// MC 1.10
	"1.10":   6144,
	"1.10.1": 6160,
	"1.10.2": 6170,

	// MC 1.11
	"1.11":   6317,
	"1.11.1": 6451,
	"1.11.2": 6452,

	// MC 1.12
	"1.12":   6580,
	"1.12.1": 6711,
	"1.12.2": 6756,

	// MC 1.13
	"1.13":   7081,
	"1.13.1": 7107,
	"1.13.2": 7132,

	// MC 1.14
	"1.14":   7318,
	"1.14.1": 7344,
	"1.14.2": 7361,
	"1.14.3": 7413,
	"1.14.4": 7469,

	// MC 1.15
	"1.15":   7664,
	"1.15.1": 7675,
	"1.15.2": 7722,

	// MC 1.16
	"1.16":   7890,
	"1.16.1": 7892,
	"1.16.2": 8010,
	"1.16.3": 8056,
	"1.16.4": 8134,
	"1.16.5": 8203,

	// MC 1.17
	"1.17":   8152,
	"1.17.1": 8516,

	// MC 1.18
	"1.18":   8830,
	"1.18.1": 8857,
	"1.18.2": 9008,

	// MC 1.19
	"1.19":   9186,
	"1.19.1": 9259,
	"1.19.2": 9366,
	"1.19.3": 9550,
	"1.19.4": 9776,

	// MC 1.20
	"1.20":   9971,
	"1.20.1": 9990,
	"1.20.2": 10236,
	"1.20.3": 10395,
	"1.20.4": 10407,
}

func TestCfConvertVersion(t *testing.T) {
	cfVerType := parseJson[[]CfVersionTypes](t, cfVersionTypes)
	cfVer := parseJson[[]CfVersions](t, cfVersions)
	for k, v := range cfVersionsTestData {
		id, b := CfVersionId(cfVerType, cfVer, k)
		assert.True(t, b)
		assert.Equal(t, v, id)
	}
}

func parseJson[T any](t *testing.T, b []byte) T {
	var a T
	err := json.Unmarshal(b, &a)
	if err != nil {
		t.Fatal(err)
	}
	return a
}

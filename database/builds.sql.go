// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: builds.sql

package database

import (
	"context"

	"github.com/mrmelon54/mc-upload-api/database/types"
)

const createBuild = `-- name: CreateBuild :execlastid
INSERT INTO builds (project, meta, filename, sha512, modrinth_id, curseforge_id)
VALUES (?, ?, ?, ?, "", "")
`

type CreateBuildParams struct {
	Project  string           `json:"project"`
	Meta     *types.BuildMeta `json:"meta"`
	Filename string           `json:"filename"`
	Sha512   string           `json:"sha512"`
}

func (q *Queries) CreateBuild(ctx context.Context, arg CreateBuildParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createBuild,
		arg.Project,
		arg.Meta,
		arg.Filename,
		arg.Sha512,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const listBuilds = `-- name: ListBuilds :many
SELECT meta, filename, sha512, modrinth_id, curseforge_id
FROM builds
WHERE project = ?
ORDER BY id
`

type ListBuildsRow struct {
	Meta         *types.BuildMeta `json:"meta"`
	Filename     string           `json:"filename"`
	Sha512       string           `json:"sha512"`
	ModrinthID   string           `json:"modrinth_id"`
	CurseforgeID string           `json:"curseforge_id"`
}

func (q *Queries) ListBuilds(ctx context.Context, project string) ([]ListBuildsRow, error) {
	rows, err := q.db.QueryContext(ctx, listBuilds, project)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBuildsRow
	for rows.Next() {
		var i ListBuildsRow
		if err := rows.Scan(
			&i.Meta,
			&i.Filename,
			&i.Sha512,
			&i.ModrinthID,
			&i.CurseforgeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCurseforgeFile = `-- name: UpdateCurseforgeFile :exec
UPDATE builds
SET curseforge_id = ?
WHERE id = ?
`

type UpdateCurseforgeFileParams struct {
	CurseforgeID string `json:"curseforge_id"`
	ID           int64  `json:"id"`
}

func (q *Queries) UpdateCurseforgeFile(ctx context.Context, arg UpdateCurseforgeFileParams) error {
	_, err := q.db.ExecContext(ctx, updateCurseforgeFile, arg.CurseforgeID, arg.ID)
	return err
}

const updateModrinthFile = `-- name: UpdateModrinthFile :exec
UPDATE builds
SET modrinth_id = ?
WHERE id = ?
`

type UpdateModrinthFileParams struct {
	ModrinthID string `json:"modrinth_id"`
	ID         int64  `json:"id"`
}

func (q *Queries) UpdateModrinthFile(ctx context.Context, arg UpdateModrinthFileParams) error {
	_, err := q.db.ExecContext(ctx, updateModrinthFile, arg.ModrinthID, arg.ID)
	return err
}

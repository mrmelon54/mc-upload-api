// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: builds.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createBuild = `-- name: CreateBuild :execlastid
INSERT INTO builds (project, meta, filename, sha512)
VALUES (?, ?, ?, ?)
`

type CreateBuildParams struct {
	Project  string
	Meta     json.RawMessage
	Filename string
	Sha512   string
}

func (q *Queries) CreateBuild(ctx context.Context, arg CreateBuildParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createBuild,
		arg.Project,
		arg.Meta,
		arg.Filename,
		arg.Sha512,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const listBuilds = `-- name: ListBuilds :many
SELECT meta, filename, sha512, mrId, cfId
FROM builds
WHERE project = ?
ORDER BY id
`

type ListBuildsRow struct {
	Meta     json.RawMessage
	Filename string
	Sha512   string
	Mrid     sql.NullString
	Cfid     sql.NullString
}

func (q *Queries) ListBuilds(ctx context.Context, project string) ([]ListBuildsRow, error) {
	rows, err := q.db.QueryContext(ctx, listBuilds, project)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBuildsRow
	for rows.Next() {
		var i ListBuildsRow
		if err := rows.Scan(
			&i.Meta,
			&i.Filename,
			&i.Sha512,
			&i.Mrid,
			&i.Cfid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCurseforgeFile = `-- name: UpdateCurseforgeFile :exec
UPDATE builds
SET cfId = ?
WHERE id = ?
`

type UpdateCurseforgeFileParams struct {
	Cfid sql.NullString
	ID   int64
}

func (q *Queries) UpdateCurseforgeFile(ctx context.Context, arg UpdateCurseforgeFileParams) error {
	_, err := q.db.ExecContext(ctx, updateCurseforgeFile, arg.Cfid, arg.ID)
	return err
}

const updateModrinthFile = `-- name: UpdateModrinthFile :exec
UPDATE builds
SET mrId = ?
WHERE id = ?
`

type UpdateModrinthFileParams struct {
	Mrid sql.NullString
	ID   int64
}

func (q *Queries) UpdateModrinthFile(ctx context.Context, arg UpdateModrinthFileParams) error {
	_, err := q.db.ExecContext(ctx, updateModrinthFile, arg.Mrid, arg.ID)
	return err
}
